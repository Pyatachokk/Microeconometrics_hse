# Присваиваем некоторое значение вместо пропуска при соблюдении условия
NA_to_value<-function(my_variable, condition, value)
{
my_variable[condition] <- value;
return(my_variable)
}
# Перекодирование категориальных переменных в бинарные
factor_to_binary<-function(my_variable,factor_name)
{
new_variable=rep(x = NA, times = length(my_variable)) # создаем переменную состояющую из пропусков
new_variable[!is.na(my_variable)                      # заменяем на 0 все значения, не соответствующие пропуску
& my_variable != "ЗАТРУДНЯЮСЬ ОТВЕТИТЬ"
& my_variable != "ОТКАЗ ОТ ОТВЕТА"
& my_variable != "НЕТ ОТВЕТА"] <- 0
new_variable[my_variable == factor_name] <- 1         # присваиваем значение 1 при определенных значениях
# факторной переменной
#с нужным значением фактора
return(new_variable)
}
# перекодируем факторную переменную в количесивенную
factor_to_numeric <- function(x)
{
return(as.numeric(levels(x))[x])
}
# Создадим переменные
# Создадим отдельную переменную для хранения обработанных данных
# и сразу вместе с ней переменную на возраст
# Пропуски в РМЭЗ получают значения 99999997, 99999998 и 99999999,
# поэтому, при создании переменных от них следует избавляться, что можно
# осуществить при помощи функции missing_to_NA
summary(new_data$u_age)
h <- data.frame('age' = missing_to_NA(new_data$u_age))
# Переменная - работает индивид или нет
summary(new_data$uj77)
h$work <- factor_to_binary(new_data$uj77,
"РЕСПОНДЕНТ СЕЙЧАС РАБОТАЕТ, НАХ-СЯ В ОПЛАЧИВ. ИЛИ НЕОПЛАЧ.ОТПУСКЕ, В Т.Ч. ДЕКРЕТНОМ ИЛИ ПО УХОДУ ЗА РЕБЕНКОМ ДО 3 ЛЕТ")
# Переменная - образование
summary(new_data$u_diplom)
h$educ_1 <- factor_to_binary(new_data$u_diplom, "законченное среднее образование")
h$educ_2 <- factor_to_binary(new_data$u_diplom, "законченное среднее специальное образование")
h$educ_3 <- factor_to_binary(new_data$u_diplom, "законченное высшее образование и выше")
# Переменная - наличие детей
summary(new_data$uj72.171)
h$children <- factor_to_binary(new_data$uj72.171, "Да")
# Переменная - количество детей
h$children_n <- factor_to_numeric(missing_to_NA(new_data$uj72.172))
h$children_n[h$children == 0] <- 0
# Переменная - количество несовершеннолетних детей
h$children_n_18 <- factor_to_numeric(missing_to_NA(new_data$uj72.173))
h$children_n_18[new_data$uj72.173 == "НЕТ ДЕТЕЙ МОЛОЖЕ 18"] <- 0
h$children_n_18[h$children_n == 0] <- 0
# Переменная - пол
h$male <- 0
h$male[new_data$uh5=="МУЖСКОЙ"] <- 1
# Переменные - вес, рост и BMI (индекс массы тела)
h$weight <- missing_to_NA(new_data$um1)
h$height <- missing_to_NA(new_data$um2)
h$BMI <- h$weight / (h$height / 100) ^ 2
# Переменная - состоит в оффициальном браке
h$marriage <- factor_to_binary(missing_to_NA(new_data$u_marst),"Состоите в зарегистрированном браке")
# Определим критерий попадания в выборку
selection_condition <- (h$male == 1 & h$age >= 18)   # построим модель для совершеннолетних мужчин
#--------------
#РАЗДЕЛ №1. Тестирование гипотезы о нормальном распределении в пробит модели
#--------------
# Оценим пробит модель
model_probit <- glm(work ~ age + I(age ^ 2) +
educ_1 + educ_2 + educ_3 +
children_n_18 + marriage + I(marriage * children_n_18) +
BMI,
data=h[selection_condition,],
family = binomial(link="probit"))
summary(model_probit)
# Запись коэффициентов и фрейма модели
model_probit_frame <- model_probit$model # записываем в отдельный dataframe наблюдения,
# по которым была оценена модель (то есть зависимую и независимую переменные)
model_probit_coef <- coef(model_probit)  # записываем значения оценок коэффициентов модели
# Проведем тест, нулевая гипотеза которого заключается в том, что случайные ошибки
# подчиняются нормальному распределению, против альтернативны о принадлежности к более
# широкому классу распределений (пирсоновская семья).
# Рассчитаем обобщенные остатки
probit_latent <- predict(model_probit);                                           #оценка латентной переменной
F_probit_latent <- pnorm(probit_latent);
f_probit_latent <- dnorm(probit_latent);
generalized_residuals <- ((model_probit_frame$work - F_probit_latent) /           #обобщенный остаток
(F_probit_latent * (1 - F_probit_latent))) *
f_probit_latent;
# Считаем производные по коэффициентам
derivative_beta <- generalized_residuals *                                        # производные по бета
cbind(1, model_probit_frame[-1])
derivative_gamma_1 <- (generalized_residuals * probit_latent ^ 2)                 # производные по коэффициенту при xb^2
derivative_gamma_2 <- (generalized_residuals * probit_latent ^ 3)                 # производные по коэффициенту при xb^3
# Проводим LM тест
ones_vector <- data.frame("my_ones" = derivative_beta[,1] / derivative_beta[,1])  # вектор единиц
ones_regression <- summary(lm(my_ones~ . + 0,                                     # регрессия на вектор единиц без константы
data = cbind(derivative_beta,ones_vector,
derivative_gamma_1,
derivative_gamma_2)));
R2 <- ones_regression$r.squared;                                           # коэффициент детерминации регрессии
n <- length(ones_regression$residuals);                                    # число наблюдений
LM_statistics <- R2 * n;                                                   # LM статистика
LM_test_p_value <- 1 - pchisq(q = LM_statistics, df = 2);                  # p-value теста
#                     data=h[selection_condition,],
#                     method = "kleinspady", gradients = TRUE)
# np_correct_0 <- model_np$confusion.matrix[1,1]
# np_correct_1 <- model_np$confusion.matrix[2,2]
# np_correct <- np_correct_0 + np_correct_1
#--------------
#РАЗДЕЛ №2. Тестирование гипотезы о наличии гетероскедастичности и её непосредственный учет в пробит модели
#--------------
# Оценим модель с учетом гетероскедастичности предполагая, что дисперсия случайной ошибки разнится в зависимости
# от количества детей, возраста и брака, то есть sigma=exp(g1*age+g2*children+g3*marriage). Нулевая гипотеза об отсутствии гетероскедастичности отвергается.
model_hetprobit <- hetglm(work ~ age + I(age ^ 2) +                                    # основное уравнение
educ_1 + educ_2 + educ_3 +
children_n_18 + marriage + I(marriage * children_n_18) +
BMI | age + children_n_18 + marriage ,                       # уравнение дисперсии
data=h[selection_condition,],
family = binomial(link="probit"),
link.scale = "log")
# Где в формуле после | стоят регрессоры, влияющие на дисперсию ошибки, то есть выражение zw
# link scale означает, в каком виде представлена ошибка. Имеются следующие варианты:
# 1. identity - sigma(i)    =  z(i)w
# 2. log - log(sigma(i))    =  z(i)w  =>  sigma(i) = exp(z(i)w)
# 3. sqrt - sqrt(sigma(i))  =  z(i)w  =>  sigma(i)=(z(i)w)^2
# Суммируем выдачу
summary(model_hetprobit)
#                     data=h[selection_condition,],
#                     method = "kleinspady", gradients = TRUE)
# np_correct_0 <- model_np$confusion.matrix[1,1]
# np_correct_1 <- model_np$confusion.matrix[2,2]
# np_correct <- np_correct_0 + np_correct_1
#--------------
#РАЗДЕЛ №2. Тестирование гипотезы о наличии гетероскедастичности и её непосредственный учет в пробит модели
#--------------
# Оценим модель с учетом гетероскедастичности предполагая, что дисперсия случайной ошибки разнится в зависимости
# от количества детей, возраста и брака, то есть sigma=exp(g1*age+g2*children+g3*marriage). Нулевая гипотеза об отсутствии гетероскедастичности отвергается.
model_hetprobit <- hetglm(work ~ age + I(age ^ 2) +                                    # основное уравнение
educ_1 + educ_2 + educ_3 +
children_n_18 + marriage + I(marriage * children_n_18) +
BMI | age + children_n_18 + marriage ,                       # уравнение дисперсии
data=h[selection_condition,],
family = binomial(link="probit"),
link.scale = "log")
# Где в формуле после | стоят регрессоры, влияющие на дисперсию ошибки, то есть выражение zw
# link scale означает, в каком виде представлена ошибка. Имеются следующие варианты:
# 1. identity - sigma(i)    =  z(i)w
# 2. log - log(sigma(i))    =  z(i)w  =>  sigma(i) = exp(z(i)w)
# 3. sqrt - sqrt(sigma(i))  =  z(i)w  =>  sigma(i)=(z(i)w)^2
# Суммируем выдачу
summary(model_hetprobit)
# Достанем выборку и коэффициенты
model_hetprobit_frame <- model.frame(model_hetprobit)
model_hetprobit_coef <- matrix(coefficients(model_hetprobit), ncol = 1)
rownames(model_hetprobit_coef) <- names(coefficients(model_hetprobit))
# Рассчитаем реализацию оценки предельного эффекта переменной BMI
# Рассчитаем значение латентной переменной из основного уравнения
model_hetprobit_latent_main <- as.matrix(model_hetprobit_frame[-1]) %*%
model_hetprobit_coef[2:ncol(model_hetprobit_frame)] +
model_hetprobit_coef[1]
# Посчитаем латентную переменную из уравнения для дисперсии случайной ошибки
model_hetprobit_std <- exp(cbind(model_hetprobit_frame$age,
model_hetprobit_frame$children_n_18,
model_hetprobit_frame$marriage) %*%
model_hetprobit_coef[-(1:ncol(model_hetprobit_frame))])
# Считаем значения реализаций оценок предельных эффектов для переменной BMI
me_BMI <- dnorm(model_hetprobit_latent_adj) *
model_hetprobit_coef[rownames(model_hetprobit_coef) == "BMI"]
hist(me_BMI)
#                     data=h[selection_condition,],
#                     method = "kleinspady", gradients = TRUE)
# np_correct_0 <- model_np$confusion.matrix[1,1]
# np_correct_1 <- model_np$confusion.matrix[2,2]
# np_correct <- np_correct_0 + np_correct_1
#--------------
#РАЗДЕЛ №2. Тестирование гипотезы о наличии гетероскедастичности и её непосредственный учет в пробит модели
#--------------
# Оценим модель с учетом гетероскедастичности предполагая, что дисперсия случайной ошибки разнится в зависимости
# от количества детей, возраста и брака, то есть sigma=exp(g1*age+g2*children+g3*marriage). Нулевая гипотеза об отсутствии гетероскедастичности отвергается.
model_hetprobit <- hetglm(work ~ age + I(age ^ 2) +                                    # основное уравнение
educ_1 + educ_2 + educ_3 +
children_n_18 + marriage + I(marriage * children_n_18) +
BMI | age + children_n_18 + marriage ,                       # уравнение дисперсии
data=h[selection_condition,],
family = binomial(link="probit"),
link.scale = "log")
# Где в формуле после | стоят регрессоры, влияющие на дисперсию ошибки, то есть выражение zw
# link scale означает, в каком виде представлена ошибка. Имеются следующие варианты:
# 1. identity - sigma(i)    =  z(i)w
# 2. log - log(sigma(i))    =  z(i)w  =>  sigma(i) = exp(z(i)w)
# 3. sqrt - sqrt(sigma(i))  =  z(i)w  =>  sigma(i)=(z(i)w)^2
# Суммируем выдачу
summary(model_hetprobit)
# Достанем выборку и коэффициенты
model_hetprobit_frame <- model.frame(model_hetprobit)
model_hetprobit_coef <- matrix(coefficients(model_hetprobit), ncol = 1)
rownames(model_hetprobit_coef) <- names(coefficients(model_hetprobit))
# Рассчитаем реализацию оценки предельного эффекта переменной BMI
# Рассчитаем значение латентной переменной из основного уравнения
model_hetprobit_latent_main <- as.matrix(model_hetprobit_frame[-1]) %*%
model_hetprobit_coef[2:ncol(model_hetprobit_frame)] +
model_hetprobit_coef[1]
# Посчитаем латентную переменную из уравнения для дисперсии случайной ошибки
model_hetprobit_std <- exp(cbind(model_hetprobit_frame$age,
model_hetprobit_frame$children_n_18,
model_hetprobit_frame$marriage) %*%
model_hetprobit_coef[-(1:ncol(model_hetprobit_frame))])
model_hetprobit_latent_adj <- model_hetprobit_latent_main / model_hetprobit_std
# Убедимся, что посчитанная вручную и методом вероятности занятости совпадают
cbind(model_hetprobit_latent_adj, model_hetprobit$residuals)
cbind(pnorm(model_hetprobit_latent_adj), predict(model_hetprobit))
# Считаем значения реализаций оценок предельных эффектов для переменной BMI
me_BMI <- dnorm(model_hetprobit_latent_adj) *
model_hetprobit_coef[rownames(model_hetprobit_coef) == "BMI"]
hist(me_BMI)
#Теперь проведем LM тест на гетероскедастичность
#Отберем переменные, которые влияют на распределение ошибки
frame_het <- model_hetprobit_frame[c("age", "children_n_18", "marriage")]    #фрейм из переменных, влияющих на дисперсию
#случайной ошибки
names(frame_het)=paste(names(frame_het), "_het")                             #добавляем приставку к именам переменных, чтобы
#отличить их при построении регрессии
#Посчитаем обобщенные остатки
probit_latent <- predict(model_probit);                                      #оценка латентной переменной
F_probit_latent <- pnorm(probit_latent);
f_probit_latent <- dnorm(probit_latent);
generalized_residuals <- ((model_probit_frame$work - F_probit_latent) /      #обобщенный остаток
(F_probit_latent * (1 - F_probit_latent))) *
f_probit_latent;
derivative_beta <- generalized_residuals *                                   #производные по коэффициентам основных переменных
cbind(1, model_probit_frame[-1])
derivative_alpha <- (generalized_residuals *                                 #производные по коэффициентам переменных, влияющих
probit_latent) * frame_het                                 #на распределение случайной ошибки
#Проводим LM тест
ones_vector <- data.frame("my_ones" = derivative_beta[,1] /                  #вектор единиц
derivative_beta[,1])
ones_regression <- summary(lm(my_ones~ . + 0,
data=cbind(ones_vector,derivative_beta,
derivative_alpha)));                              #регрессия на вектор единиц
R2 <- ones_regression$r.squared;                                             #коэффициент детерминации регрессии
n <- length(ones_regression$residuals);                                      #число наблюдений
LM_statistics <- R2 * n;                                                     #LM статистика
LM_test_p_value <- 1 - pchisq(q = LM_statistics, df = dim(frame_het)[2]);    #p-value теста
# ЗАДАНИЯ
# 1. Сравните все полученные результаты, в частности, предельные эффекты и их стандартные ошибки, с теми, что
#    были получены в пробит модели без учета гетероскедастичности
# 2. Повторите оценивание модели учтя влияние лишь брака на дисперсию случайной ошибки при помощи LR и LM тестов. Провертье, значимо ли его влияние?
# 3. Повторите оценивание модели учтя влияние BMI и квадрата возраста на дисперсию ошибки при помощи LR и LM тестов. Провертье, значимо ли их влияние?
#--------------
#РАЗДЕЛ №3. Тестирование совместной значимости коэффициентов
#--------------
# Проверим гипотезу о возможности исключения из модели переменных на уровень образования,
# обязательно оценив её по той же выборке, что и полную модель
model_probit_R <- glm(work ~ age + I(age ^ 2) +
children_n_18 + marriage + I(marriage * children_n_18) +
BMI,
data = model_probit_frame,
family = binomial(link="probit"))
# Осуществим LR тест и убедимся, что нулевая гипотеза о равенстве всех экоффициентов
# при переменных на образование отвергается, вследствие чего выбор делается в пользу
# полной модели
lrtest(model_probit, model_probit_R)
# Теста Вальда дает аналогичный результат
waldtest(model_probit, model_probit_R)
#--------------
#РАЗДЕЛ №4. Выбор между моделями, оцененными по разными выборкам
#--------------
# При помощи LR теста проверим, можно ли оценивать единую модель для женатых
# и холостых мужчин
# Логарифм правдоподобия для общей (сокращенной) модели
lnL_R <- logLik(model_probit)
# Логарифм правдоподобия для модели, оцененной по женатым
model_probit_married <- glm(work ~ age + I(age ^ 2) +
educ_1 + educ_2 + educ_3 +
children_n_18 + marriage + I(marriage * children_n_18) +
BMI,
data=h[selection_condition & (h$marriage == 1),],
family = binomial(link="probit"))
lnL_married <- logLik(model_probit_married)
# Логарифм правдоподобия для модели, оцененной по холостым
model_probit_unmarried <- glm(work ~ age + I(age ^ 2) +
educ_1 + educ_2 + educ_3 +
children_n_18 + marriage + I(marriage * children_n_18) +
BMI,
data=h[selection_condition & (h$marriage == 0),],
family = binomial(link="probit"))
lnL_unmarried <- logLik(model_probit_unmarried)
# Логарифм правдоподобия полной модели
lnL_F <- lnL_married + lnL_unmarried
# Посчитаем статистку LR теста
lr_stat <- 2 * (lnL_F - lnL_R)
# Вычислим p-value учитывая, что статистика имеет хи-квадрат распределение
# с числом степеней свободы, равным количеству наложенных ограничений, в данном случае
# совпадающим с количеством независимых переменных (включая константу), не имеющих взаимодействия
# с переменной marriage. В данном случае нулевая гипотеза о справедливости накладываемых ограниченной
# моделью ограничений отвергается, вследствие чего мы отдаем предпочтение полной модели, предполагающей, что
# коэффициенты в моделях для женатых и холостых мужчин различаются.
p_value <- as.numeric(1 - pchisq(q = lr_stat, df = 7))
#--------------
#РАЗДЕЛ №5. Оценивание параметров системы бинарных уравнений
#--------------
# Оценим систему бинарных уравнений, где в качестве второго уравнения выступает уравнение на брак
bvp <- gjrm(list(work ~ age + I(age ^ 2) +                                     # формула первого уравнения
educ_1 + educ_2 + educ_3 +
children_n_18 + marriage + I(marriage * children_n_18) +
BMI,                                                        # формула второго уравнения
marriage ~ educ_1 + educ_2 + educ_3 +
age + I(age ^ 2) +
BMI + I(BMI^2)),
data=h[selection_condition,],
Model = "B",                                                # двумерный пробит
margins = c("probit", "probit"))                            # маржинальные распределения можно изменить
#--------------
#РАЗДЕЛ №5. Оценивание параметров системы бинарных уравнений
#--------------
# Оценим систему бинарных уравнений, где в качестве второго уравнения выступает уравнение на брак
bvp <- gjrm(list(work ~ age + I(age ^ 2) +                                     # формула первого уравнения
educ_1 + educ_2 + educ_3 +
children_n_18 + marriage + I(marriage * children_n_18) +
BMI,                                                        # формула второго уравнения
marriage ~ educ_1 + educ_2 + educ_3 +
age + I(age ^ 2) +
BMI + I(BMI^2)),
data=h[selection_condition,],
Model = "B",                                                # двумерный пробит
margins = c("probit", "probit"))                            # маржинальные распределения можно изменить
# Важно обратить внимание на параметр theta, который представляет собой корреляцию
# между случайными ошибками и не значим в данном случае
summary(bvp)
# Можно получить безусловные предсказания вероятностей для каждого из уравнений
predict(bvp, 1)   # уравнение на занятость
predict(bvp, 2)   # уравнение на брак
#--------------
#РАЗДЕЛ №6. Выбор между моделями на основании критериев AIC и BIC
#--------------
# оценим logit модель
model_logit <- glm(work ~ age + I(age ^ 2) +
educ_1 + educ_2 + educ_3 +
children_n_18 + marriage + I(marriage * children_n_18) +
BMI,
data=h[selection_condition,],
family = binomial(link="logit"))
# посмотрим на AIC и BIC пробит, логит и хетпробит моделей отдав предпочтение той из них,
# у которой значения соответствующих информационных критериев окажутся наименьшими
data.frame("Модель" = c("probit", "logit", "hetprobit"),                # названия моделей
"AIC" = c(AIC(model_probit), AIC(model_logit), AIC(model_hetprobit)),   # AIC моделей
"BIC" = c(BIC(model_probit), BIC(model_logit), BIC(model_hetprobit)))   # BIC моделей
packages <- c("foreign", "ggplot2", "BaylorEdPsych", "miscTools", "pROC", "margins", "boot", "lmtest", "numDeriv", "np", "glmx", "GJRM")
if (length(setdiff(packages, rownames(installed.packages()))) > 0)
{
install.packages(setdiff(packages, rownames(installed.packages())))
}
library("foreign")             # импорт данных
library("ggplot2")             # красивые графики
library("BaylorEdPsych")       # PseudoR2
library("miscTools")           # Медианные значния по столбцам
library("pROC")                # ROC кривая
library("margins")             # Предельные эффекты
library("boot")                # бутстрап
library("lmtest")              # дополнительные функции для тестирования гипотез
library("numDeriv")
library("np")
library("glmx")                # гетероскдестичный пробит
library("GJRM")                # очень крутой конструктор моделей, включающий двумерный пробит
# Отключим scientific notation
options(scipen = 999)
Sys.setlocale(locale="Russian")
# Загрузка данных
new_data <- read.spss("r25i_os_31.sav",   # путь к файлу (замените на свой)
to.data.frame = TRUE,                                                            # загружаем как dataframe
use.value.labels = TRUE,                                                         # использовать численные значения
# вместо слов для некоторых переменных
max.value.labels = 30)                                                           # сколько различных значений должна принимать
# переменная, чтобы считаться численной, а не факторной
# Инициализируем некоторые вспомонательные фукции для обработки данных
# Добавление NA в непрерывные переменные
missing_to_NA <- function(my_variable,             # обрабатываемая переменная
to_numeric = FALSE)      # нужно ли перевести факторную переменную в численную
{
if (is.numeric(my_variable)) #если мы имеем дело с количественной переменной
{
# В РМЭЗ отсутствие ответа на вопрос закодировано числами от 99999996 до
# 99999999, поэтому перед началом анализа следует присвоить соответствующим
# значениям пропуски
my_variable[(my_variable == 99999996) | (my_variable == 99999997) |
(my_variable == 99999998) |(my_variable == 99999999)] <- NA
} else                       #если мы столкнулись с факторной (категориальной) переменной
{
# Для факторных переменных при чтении данных из SAV. файла сохраняются строковые значения,
# некоторые из которых необходимо вручную заменить на пропуски
my_variable[(my_variable == "ЗАТРУДНЯЮСЬ ОТВЕТИТЬ") |
(my_variable =="ОТКАЗ ОТ ОТВЕТА") |
(my_variable == "НЕТ ОТВЕТА")] <- NA
my_variable=droplevels(my_variable)
}
if (to_numeric) #если нужно перевести фактоорную переменную в ччисленную
{
if (is.factor(my_variable))
{
my_variable <- as.character(my_variable)
}
my_variable <- as.numeric(my_variable)
}
return(my_variable)
}
# Присваиваем некоторое значение вместо пропуска при соблюдении условия
NA_to_value<-function(my_variable, condition, value)
{
my_variable[condition] <- value;
return(my_variable)
}
# Перекодирование категориальных переменных в бинарные
factor_to_binary<-function(my_variable,factor_name)
{
new_variable=rep(x = NA, times = length(my_variable)) # создаем переменную состояющую из пропусков
new_variable[!is.na(my_variable)                      # заменяем на 0 все значения, не соответствующие пропуску
& my_variable != "ЗАТРУДНЯЮСЬ ОТВЕТИТЬ"
& my_variable != "ОТКАЗ ОТ ОТВЕТА"
& my_variable != "НЕТ ОТВЕТА"] <- 0
new_variable[my_variable == factor_name] <- 1         # присваиваем значение 1 при определенных значениях
# факторной переменной
#с нужным значением фактора
return(new_variable)
}
# перекодируем факторную переменную в количесивенную
factor_to_numeric <- function(x)
{
return(as.numeric(levels(x))[x])
}
# Создадим переменные
# Создадим отдельную переменную для хранения обработанных данных
# и сразу вместе с ней переменную на возраст
# Пропуски в РМЭЗ получают значения 99999997, 99999998 и 99999999,
# поэтому, при создании переменных от них следует избавляться, что можно
# осуществить при помощи функции missing_to_NA
summary(new_data$u_age)
h <- data.frame('age' = missing_to_NA(new_data$u_age))
# Переменная - работает индивид или нет
summary(new_data$uj77)
h$work <- factor_to_binary(new_data$uj77,
"РЕСПОНДЕНТ СЕЙЧАС РАБОТАЕТ, НАХ-СЯ В ОПЛАЧИВ. ИЛИ НЕОПЛАЧ.ОТПУСКЕ, В Т.Ч. ДЕКРЕТНОМ ИЛИ ПО УХОДУ ЗА РЕБЕНКОМ ДО 3 ЛЕТ")
# Переменная - образование
summary(new_data$u_diplom)
h$educ_1 <- factor_to_binary(new_data$u_diplom, "законченное среднее образование")
h$educ_2 <- factor_to_binary(new_data$u_diplom, "законченное среднее специальное образование")
h$educ_3 <- factor_to_binary(new_data$u_diplom, "законченное высшее образование и выше")
# Переменная - наличие детей
summary(new_data$uj72.171)
h$children <- factor_to_binary(new_data$uj72.171, "Да")
# Переменная - количество детей
h$children_n <- factor_to_numeric(missing_to_NA(new_data$uj72.172))
h$children_n[h$children == 0] <- 0
# Переменная - количество несовершеннолетних детей
h$children_n_18 <- factor_to_numeric(missing_to_NA(new_data$uj72.173))
h$children_n_18[new_data$uj72.173 == "НЕТ ДЕТЕЙ МОЛОЖЕ 18"] <- 0
h$children_n_18[h$children_n == 0] <- 0
# Переменная - пол
h$male <- 0
h$male[new_data$uh5=="МУЖСКОЙ"] <- 1
# Переменные - вес, рост и BMI (индекс массы тела)
h$weight <- missing_to_NA(new_data$um1)
h$height <- missing_to_NA(new_data$um2)
h$BMI <- h$weight / (h$height / 100) ^ 2
# Переменная - состоит в оффициальном браке
h$marriage <- factor_to_binary(missing_to_NA(new_data$u_marst),"Состоите в зарегистрированном браке")
# Определим критерий попадания в выборку
selection_condition <- (h$male == 1 & h$age >= 18)   # построим модель для совершеннолетних мужчин
#--------------
data = h[selection_condition]
data = h[selection_condition,]
test = data[-floor(length(data)*0.6),]
train = data[floor(length(data)*0.6),]
length(data)*0.6
train = data[floor(nrow(data)*0.6),]
test = data[-floor(nrow(data)*0.6),]
floor(nrow(data)
)
data = h[selection_condition,]
train = data[floor(nrow(data)*0.6),]
test = data[-floor(nrow(data)*0.6),]
a <- createDataPartition(data, p = 0.6, list=FALSE)
library(caret)
a <- createDataPartition(data, p = 0.6, list=FALSE)
a <- createDataPartition(data$age, p = 0.6, list=FALSE)
train = data[:floor(nrow(data)*0.6),]
train = data[1:floor(nrow(data)*0.6),]
test = data[-floor(nrow(data)*0.6):(nrow(data),]
test = data[-floor(nrow(data)*0.6):(nrow(data)),]
test = data[-floor(nrow(data)*0.6):nrow(data),]
test = data[floor(nrow(data)*0.6)+1:nrow(data),]
model_probit <- glm(work ~ age + I(age ^ 2) +
educ_1 + educ_2 + educ_3 +
children_n_18 + marriage + I(marriage * children_n_18) +
BMI,
data=train,
family = binomial(link="probit"))
model_logit <- glm(work ~ age + I(age ^ 2) +
educ_1 + educ_2 + educ_3 +
children_n_18 + marriage + I(marriage * children_n_18) +
BMI,
data=train,
family = binomial(link="logit"))
prob_pred(test)
prob_pred = predict(glm, test)
prob_pred = predict(model_probit, test)
prob_pred = predict(model_probit, test) > 0.5
prob_pred = as.numeric(predict(model_probit, test) > 0.5)
prob_log = as.numeric(predict(model_logit, test) > 0.5)
prob_true = pnorm(test$work)
prob_acc = test$work == prob_pred
prob_acc = sum(as.numeric(test$work == prob_pred))
prob_acc = as.numeric(test$work == prob_pred)
summary(prob_acc)
prob_acc = as.numeric(test$work == prob_log)
